//해답을 보고 해결
//입력받은 값들중에서 음수가 나오면 앞뒤를 확인해서 풀어내는 식으로 만들었지만 반례가 너무 많이 나왔고 그때마다 코드를 고치기에는 코드가 산으로 가는것 같아서 해답을 참고했다.
//이 코드는 삭제시킬경우와 삭제시키지 않을 경우의 합을 따로 저장하는 식으로 해결했다. 제거하면dp[i][1], 제거하지않으면 dp[i][0]
//예를 들어서 지금 i번째 까지 합중에 제거한것이 존재한다면 i번째를 제거한것과 i-1번째를 제거 했을때를 비교해준다.
다이나믹프로그래밍 알고리즘문제를 해결할때에는 이 문제를 어떤식으로 점화식에 입힐지와 어떤 규칙성을 갖고 있는지 생각해보자.


#include<iostream>
#include<algorithm>
#include<vector>
#include<climits>
#include<cmath>
#define endl "\n"

using namespace std;

int N;
int arr[111111];
int dp[111111][2];		//dp[i][0] 은 삭제시키지 않았을 경우를, dp[i][1]은 i까지 합중에 삭제 시킨것이 있을 경우를 의미함
int result = 0;

void Input() {
	cin >> N;
	for (int i = 0; i < N; i++) {
		cin >> arr[i];
	}
}

void Solution() {
	result = arr[0];
	dp[0][0] = arr[0];

	for (int i = 1; i < N; i++) {
		dp[i][0] = max(dp[i - 1][0] + arr[i], arr[i]);
		dp[i][1] = max(dp[i - 1][0], dp[i - 1][1] + arr[i]);
		result = max(dp[i][0], max(result, dp[i][1]));
	}

	/*for (int i = 0; i < N; i++) {
		cout << dp[i][0] << " ";
	}cout << endl;
	for (int i = 0; i < N; i++) {
		cout << dp[i][1] << " ";
	}cout << endl;*/

	cout << result;
}

void Solve() {
	Input();
	Solution();
}

int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Solve();
}

