처음에는 DP를 1차원 배열로 dp[] 로 설정하고 해결하려고했으나 계속 시간초과가 발생했다.
DP 함수에는 순서를 저장하는 cnt 라는 변수를 저장했지만 dp에는 굳이 순서를 저장하지 않아도 해결될거라고 생각했고 그것이 더 효율적이라고 생각했다.
확실히 2차원보다는 1차원 배열이 비교횟수가 적어질거라고 생각했다.
하지만 역시 중복되는 상황이 발생한다. dp[6] 즉 6번의 팔굽혀펴기를 했을때 얻을 수 있는 점수를 구해야할때 (나올 수 있는 점수는 1,3) 
(점수 3 사용) "dp[3]"을 구하게되고 여기서 dp[3]을 저장하게 해주면 그 다음에 (점수 1 사용) dp[5] (점수 1 사용) "dp[3]" 할때 전에 저장했던 값을 중복적으로 가져오게
되어서 올바른 값을 추출하지 못한다.
dp 를 설정하게 확실하게 겹쳐지는 부분은 없는지 생각하고 설정해주자

#include<iostream>
#include <string>
#include <vector>
#include<algorithm>
#include<memory.h>

#define endl "\n"
using namespace std;


int N,M;
int num[11];
void Input() {
	cin >> N >> M;
	for (int i = 0; i < M; i++) { cin >> num[i]; }
}
int dp[5555][5555];
int result;
int DP(int n,int cnt) {
	if (n == 0) { return 0; }
	int& res = dp[n][cnt];
	if (res !=-1) {  return res; }

	res = -987654321;
	for (int i = 0; i < M; i++) {
		if (n - num[i]*cnt >= 0) {
			res = max(DP(n - num[i]*cnt,cnt+1) + num[i], res);
		}
	}
	return res;
}

int solution() {
	if (DP(N, 1) < 0) { cout << -1<<endl; }
	else { cout << dp[N][1] << endl; }
	//for (int i = 0; i < 30; i++) { cout << i << " " << dp[i] << endl; }
	return 0;
}

int main(void) {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	int T;
	cin >> T;
	for (int i = 0; i < T; i++) {
		memset(dp, -1, sizeof(dp));
		Input();
		solution();
		
	}
}
