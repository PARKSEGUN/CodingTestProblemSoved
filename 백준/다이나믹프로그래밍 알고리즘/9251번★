이번 문제도 dp를 어떻게 설정해야할지 정하지 못해서 해결하지 못했다.
그래도 dp 설정하는 방법에 좀 더 이해하게 해준 문제이다.
혹시라도 dp설정을 올바르게 했더라면 해결할 수 있었을까 반성하게 된다.
LCS(최장 공톡 부분 수열)은 왠지 다음에도 다시 접하게 되는 문제같다.
확실하게 이해하고 암기하자.

일단 dp[x][y]로 설정을 해준다. x는 첫번째 문자열에서의 범위, y는 두번째 문자열에서의 범위를 말한다.
예를 들어 dp[5][5]가 있다면 첫번째배열의 1~5번째 문자와 두번째 배열 1~5째 문자중에서의 LCS 값을 의미한다.
배열에 이에 맞게 처음부터 채워나가게 되면 
같은 값이 있다면 좌대각 값의 +1 을 해서 저장시키고
다른 값이 있다면 위쪽 또는 왼쪽 중에 큰 값을 저장하는 규칙을 발견하게된다.

#include<iostream>
#include<algorithm>
#include<string>
#include<queue>
#include<deque>

#define endl "\n"
using namespace std;

string s1,s2;

void input() {
	cin >> s1>>s2;
}
int dp[1111][1111];

void solve() {	
	for (int i = 0; i < s1.size(); i++) {
		for (int j = 0; j < s2.size(); j++) {
			if (s1[i] == s2[j]) {
				dp[i + 1][j + 1] = dp[i][j] + 1;
			}
			else {
				dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j]);
			}
		}
	}

	/*for (int i = 0; i <= s1.size(); i++) {
		for (int j = 0; j <= s2.size(); j++) {
			cout << dp[i][j] << " ";
		}cout << endl;
	}*/
	cout<<dp[s1.size()][s2.size()];
}

int main(void) {
	input();
	solve();
}
