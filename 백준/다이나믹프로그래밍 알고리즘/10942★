처음에 접근했던 방법은 N의 수가 2000으로 낮은 편인것같아서 속는셈 치고 구하려는 범위가 나왔을때 처음부터 끝까지 탐색해서 팰린드롬이 성립하는지 찿아내는식으로 작성했지만
역시나 시간초과가 발생했다, 그래서 dp[x][y]를 x에서 부터 y까지 라는 dp를 생성해주고 모든 범위내의 dp 값을 구한다음에 출력하는 식으로 작성하려 했지만
시간초과가 발생했다.
해서 구글링으로 2중 for문의 탐색 범위를 바꿔줘서 재귀 함수 없이 모든 dp를 구해서 해결하는 법을 보았다.

시간초과 코드----------------------------------------------------
#include<iostream>
#include<algorithm>
#include<vector>
#include<climits>
#include<cmath>

#define endl "\n"
using namespace std;
int N;
int arr[2222];

void Input() {
	cin >> N;
	for (int i = 0; i < N; i++) { cin >> arr[i]; }
}
int dp[2222][2222];		//아직 값이 저장 안됐으면 0, 팰린드롬이 성립하면 1, 성립하지않다면 2를 저장

int DP(int x, int y) {
	if (dp[x][y] != 0) { return dp[x][y]; }

	if (arr[x] == arr[y] && DP(x + 1, y - 1) == 1) { return 1; }
	else return 2;
}
void setting() {
	for (int i = 0; i < N; i++) { dp[i][i] = 1; }	//범위가 한자리를 가르키면 참
	for (int i = 0; i < N - 1; i++) {
		if (arr[i] == arr[i + 1]) { dp[i][i + 1] = 1; }		//범위가 2인 자료들 값 저장
		else dp[i][i + 1] = 2;
	}
	for (int i = 0; i < N; i++) {
		for (int j = i+2; j < N; j++) {
			if (dp[i][j] == 0&&i<=j) { dp[i][j]=DP(i, j); }
		}
	}
}
vector<int> vec;
void Solution() {
	setting();
	//for (int i = 0; i < N; i++) {
	//	for (int j = 0; j < N; j++) {
	//		cout << dp[i][j] << " ";
	//	}cout << endl;
	//}
	int k = 0;
	cin >> k;
	for (int i = 0; i < k; i++) {
		int a=0, b = 0;
		cin >> a >> b;
		if (dp[a - 1][b - 1] == 2) { cout << 0 << endl; }
		else
			cout << 1 << endl;
	}
}

int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Input();
	Solution();
}




해결 코드 ------------------------------------------------
#include<iostream>
#include<algorithm>
#include<vector>
#include<climits>
#include<cmath>

#define endl "\n"
using namespace std;
int N;
int arr[2222];

void Input() {
	cin >> N;
	for (int i = 0; i < N; i++) { cin >> arr[i]; }
}
bool dp[2222][2222];		// 팰린드롬이 성립하면 1, 성립하지않다면 0를 저장
void setting() {
	for (int i = 0; i < N; i++) { dp[i][i] = 1; }	//범위가 한자리를 가르키면 참
	for (int i = 0; i < N - 1; i++) {
		if (arr[i] == arr[i + 1]) { dp[i][i + 1] = 1; }		//범위가 2인 자료들 값 저장
		else dp[i][i + 1] = 0;
	}
	for (int i = 2; i < N; i++) {
		for (int j = 0; i+j < N; j++) {
			if (arr[j] == arr[j + i] && dp[j + 1][j + i - 1] == 1) { dp[j][j + i] = 1; }
		}
	}
}
vector<int> vec;
void Solution() {
	setting();
	//for (int i = 0; i < N; i++) {
	//	for (int j = 0; j < N; j++) {
	//		cout << dp[i][j] << " ";
	//	}cout << endl;
	//}
	int k = 0;
	cin >> k;
	for (int i = 0; i < k; i++) {
		int a=0, b = 0;
		cin >> a >> b;
		cout << dp[a - 1][b - 1]<<endl;
	}
}

int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Input();
	Solution();
}





