다이나믹프로그래밍 문제는 규칙성을 찾으면 좋다 dp[][] 부분을 채워주기 위해서는 어떤 값이 필요한지를 생각해보자

#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<cmath>
#include<vector>
//#include<windows.h>

#define endl "\n"

using namespace std;

int N;
int map[44][44];
long long int dp[44][44][3];	//마지막 칸은 방향을 나타냄 0 가로, 1 세로, 2 대각선

void Input() {
	cin >> N;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> map[i][j];
		}
	}
}


int result;



void Solve() {
	dp[0][1][0] = 1;
	for (int i = 0; i < N; i++) {
		for (int j = 2; j < N; j++) {
			if (j - 1 >= 0&&map[i][j]!=1)dp[i][j][0] = dp[i][j - 1][0] + dp[i][j - 1][2];
			if (i - 1 >= 0&&map[i][j] != 1)dp[i][j][1] = dp[i - 1][j][1] + dp[i - 1][j][2];
			if (i - 1 >= 0 && j - 1 >= 0 && map[i][j] != 1 && map[i-1][j] != 1 && map[i][j-1] != 1)dp[i][j][2] = dp[i - 1][j - 1][0] + dp[i - 1][j - 1][1] + dp[i - 1][j - 1][2];
		}
	}
	cout << dp[N - 1][N - 1][0] + dp[N - 1][N - 1][1] + dp[N - 1][N - 1][2];
}

int main(void) {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	Input();
	Solve();
}
