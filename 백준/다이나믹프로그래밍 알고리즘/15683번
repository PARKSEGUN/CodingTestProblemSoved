DFS를 사용하고 CCTV가 감시할 수 있는 방향을 부함수로 나누어주게되면 쉽게 해결 할 수 있었다.

#include<iostream>
#include<algorithm>

#define endl "\n"
using namespace std;
int N, M;
int Map[11][11];

void  Input() {
	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> Map[i][j];
		}
	}
}

void UP(int map[][11],int x,int y) {
	x--;
	while (map[x][y] != 6  && x >= 0 && x < N && y >= 0 && y < M) {
		if(map[x][y]==0)map[x][y] = 9;
		x--;
	}
}
void RIGHT(int map[][11], int x, int y) {
	y++;
	while (map[x][y] != 6 && x >= 0 && x < N && y >= 0 && y < M) {
		if (map[x][y] == 0)map[x][y] = 9;
		y++;
	}
}
void LEFT(int map[][11], int x, int y) {
	y--;
	while (map[x][y] != 6 && x >= 0 && x < N && y >= 0 && y < M) {
		if (map[x][y] == 0)map[x][y] = 9;
		y--;
	}
}
void DOWN(int map[][11], int x, int y) {
	x++;
	while (map[x][y] != 6 && x >= 0 && x < N && y >= 0 && y < M) {
		if (map[x][y] == 0)map[x][y] = 9;
		x++;
	}
}
int result = 987654321;
int test(int map[][11]) {
	int sum = 0;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (map[i][j] == 0) {
				sum++;
			}
		}
	}
	return sum;
}
void print(int map[][11]) {
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cout << map[i][j] << " ";
		}
		cout << endl;
	}
}
void copy(int subMap[][11],int map[][11]) {
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			subMap[i][j] = map[i][j];
		}
	}
}
void DFS(int map[][11],int x , int y) {
	int subMap[11][11] = { 0, };
	copy(subMap, map);

	if (y == M) { x++; y = 0; }
	if (x < 0 && y < 0 && x >= N && y >= M) { return; }

	if (subMap[x][y] == 0 || subMap[x][y] == 6 || subMap[x][y] == 9) {
		if (y + 1 == M) { DFS(subMap, x + 1, 0); }
		else DFS(subMap, x, y + 1);
		return;
	}

	if (subMap[x][y] == 1) {
		UP(subMap, x, y); DFS(subMap, x, y + 1); copy(subMap, map);
		LEFT(subMap, x, y); DFS(subMap, x, y + 1); copy(subMap, map);
		RIGHT(subMap, x, y); DFS(subMap, x, y + 1); copy(subMap, map);
		DOWN(subMap, x, y); DFS(subMap, x, y + 1); copy(subMap, map);
	}
	else if (subMap[x][y] == 2) {
		LEFT(subMap, x, y); RIGHT(subMap, x, y); DFS(subMap, x, y + 1); copy(subMap, map);
		UP(subMap, x, y); DOWN(subMap, x, y); DFS(subMap, x, y + 1); copy(subMap, map);
	}
	else if (subMap[x][y] == 3) {
		UP(subMap, x, y); RIGHT(subMap, x, y); DFS(subMap, x, y + 1); copy(subMap, map);
		RIGHT(subMap, x, y); DOWN(subMap, x, y); DFS(subMap, x, y + 1); copy(subMap, map);
		DOWN(subMap, x, y); LEFT(subMap, x, y); DFS(subMap, x, y + 1); copy(subMap, map);
		LEFT(subMap, x, y); UP(subMap, x, y); DFS(subMap, x, y + 1); copy(subMap, map);
	}
	else if (subMap[x][y] == 4) {
		UP(subMap, x, y); LEFT(subMap, x, y); RIGHT(subMap, x, y); DFS(subMap, x, y + 1); copy(subMap, map);
		UP(subMap, x, y); RIGHT(subMap, x, y); DOWN(subMap, x, y); DFS(subMap, x, y + 1); copy(subMap, map);
		RIGHT(subMap, x, y); DOWN(subMap, x, y); LEFT(subMap, x, y); DFS(subMap, x, y + 1); copy(subMap, map);
		DOWN(subMap, x, y); LEFT(subMap, x, y); UP(subMap, x, y); DFS(subMap, x, y + 1); copy(subMap, map);
	}
	else if (subMap[x][y] == 5) {
		UP(subMap, x, y); LEFT(subMap, x, y); RIGHT(subMap, x, y);	DOWN(subMap, x, y); DFS(subMap, x, y + 1); copy(subMap, map);
	}
	result = min(result, test(subMap));
	
	//cout << endl; print(subMap);
}

void Solve() {
	result = min(result, test(Map));
	DFS(Map, 0, 0);
	cout << result;
}

int main(void) {
	Input();
	Solve();
}
