처음에 작성했던 방법은 map 값으로 범위를 설정해주고 그범위에서 최댓값을 찾아서 다시 또 그 최대값의 범위를 구해주는 방식으로 설정하고 dp 값을 바꿔주는 방식으로 
작성하려고 했지만 오답처리를 받았다.
왜 오답인지 반례를 찾지 못했고 블로그확인을 했더니 
처음에 dp값은 중복되지못하는 큰수로 초기화를 시켜주고
처음 부터 끝까지 탐색해주면서 각 map 의 값을 다시 범위로 for문을 만들어주고 dp 값을 최솟값으로 설정해주는 방식으로 작성하였다,
처음에 내가 작성했던 코드와 차이점 또는 반례가 있는지 다시 한번 찾아보자

처음 작성했던 코드-------------------------------------------------------------
#include<iostream>
#include<algorithm>
#include<vector>
#include<climits>
#include<cmath>
#include<queue>

#define endl "\n"
using namespace std;
int N;
int map[1111];
void Input() {
	cin >> N;
	for (int i = 0; i < N; i++) { cin >> map[i]; }
}
int dp[1111];
void Solution() {
	int MAX = map[0];
	int MAX_ = MAX;
	
	int i = 1;
	while (i < N) {
			MAX = 0;
			MAX_ = i + MAX_;
			int cnt = 0;
			int val = dp[i - 1];
			while (i < MAX_ && i < N) {
				dp[i] = val + 1;
				if (MAX < map[i] + cnt) { MAX = map[i]; }
				i++;
				cnt++;
			}
			if (MAX == 0&&i<N-1) { cout << -1; exit(0); }
			MAX_ = MAX;
	}

	cout << dp[N - 1];
}


int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Input();
	Solution();
}
다시 작성한 코드-------------------------------------------------------------
#include<iostream>
#include<algorithm>
#include<vector>
#include<climits>
#include<cmath>
#include<queue>

#define endl "\n"
#define MAX 987654321
using namespace std;
int N;
int map[1111];
void Input() {
	cin >> N;
	for (int i = 0; i < N; i++) { cin >> map[i]; }
}
int dp[1111];
void Solution() {
	for (int i = 0; i < N; i++) { dp[i] = MAX; }
	dp[0] =0;
	for (int i = 0; i < N; i++) {
		for (int j = 1; j <= map[i]; j++) {
			dp[i + j] = min(dp[i + j], dp[i] + 1);
		}
	}
	//for (int i = 0; i < N; i++) { cout << dp[i] << " "; }
	if (dp[N - 1] == MAX) { cout << -1; exit(0); }
	cout << dp[N - 1];
}


int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Input();
	Solution();
}

