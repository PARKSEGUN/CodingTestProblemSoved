먼저 어떤 값들을 기억해야하는지가 중요한것 같다.
이 문제에서는 A,B,C 의 각각의 개수와 입력받은 문장의 길이를 따로 저장해 두어야하고
DP를 사용할때에는 A,B,C의 개수 그리고 전의 알파벳 그리고 전전의 알파벳이 어떤것이 왔는지를 알아야한다.
그래서 처음에는 함수는 만들어주었지만 그 함수에 인자에다가 전과 전전의 알파벳을 기억하는 변수를 따로 만들어주지 않고
dp 도 dp[n][a][b][c] 이렇게 n 의 크기와 A,B,C 의 개수만 입력가능하게 만들어주었다.
이렇게 만들면 메모이제이션이 성립해서 시간을 단축시킬수 있다고 생각했다.
하지만 같은 n의 크기에 a,b,c 개를 갖는 순열들이 한개 이상으로 존재하고 중복돼서 오류가 나타나게된다.
또한 여기서 n은 a+b+c 와 같은 수를 의미하기 때문에 따로 n을 저장할 필요도 없었다.
따라서 dp 를 [a][b][c][p][pp] 즉 전에 나온 알파벳 p 와 전전에 나온 알파벳 pp 를 기억해주게된다면 메모이제이션이 성립하게된다.
즉 저번에 탐색했던 것을 다시한번 탐색하는 것을 막아주게되어서 시간을 줄일 수 있는 것이다.
문제를 이해하고 어떻게 해결해야하는지는 알겠지만 이 해결방법은 dp 적용시키고 메모이제이션과같은 효율적인 방법에 적용시키는 것이 아직 미숙하다.
연습하자.

#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>
#include<string>
#include<memory.h>
using namespace std;

char result[55];
int N;
int an, bn, cn;
//AABCABCABBABCABCABCCABCABCAABCABCAABCABBAAACBACBAC
void Input() {
	string str;
	cin >> str;
	N = str.size();
	for (int i = 0; i < N; i++) {
		if (str[i] == 'A') { an++; }
		else if (str[i] == 'B') { bn++; }
		else if (str[i] == 'C') { cn++; }
	}
}
bool dp[55][55][55][4][4];
void DP(int n, int a, int b, int c,char p, char pp) {
	if (n == N) {
		if (an == a && bn == b && cn == c) { cout << result; exit(0); }
		else { dp[a][b][c][p-'A'][pp-'A'] = true; return; }
	}

	if (dp[a][b][c][p - 'A'][pp - 'A'] == false) { dp[a][b][c][p - 'A'][pp - 'A'] = true; }
	else return;
	if (a < an) {
		result[n] = 'A';
		DP(n + 1, a + 1, b, c,'A',p);
	}

	if (b < bn && p != 'B') {
		result[n] = 'B';
		DP(n + 1, a, b + 1, c, 'B', p);
	}

	if (c < cn && p != 'C' && pp != 'C') {
		result[n] = 'C';
		DP(n + 1, a, b, c + 1, 'C', p);
	}
}


void Solve() {
	DP(0, 0, 0, 0,'D','D');
	cout << -1;
}

int main(void) {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	Input();
	Solve();
}
