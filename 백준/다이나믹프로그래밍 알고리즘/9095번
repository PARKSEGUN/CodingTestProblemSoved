문제에서 N은 11보다 작은 양수라는 조건에서 10까지 직접 구해보는 식과 비슷하게 코딩을 하였다.
딱봐도 너무 수준 낮은 코드다.
느낌있는 코드를 작성하도록 노력하자

#include<iostream>
#include<vector>
#include<algorithm>
#include<cstdlib>

using namespace std;

int N;
int comb(int a, int b) {
	int result_1 = 1;
	int result_2 = 1;
	int count = b;
	for (int i = 0; i < count; i++) {
		result_1 *= a;
		result_2 *= b;
		a--;
		b--;
	}
	return result_1 / result_2;
}
int T;
int main(void) {
	cin >> T;
	for (int k = 0; k < T; k++) {
		vector<int> vec;
		cin >> N;
		int result = 1;
		for (int i = 0; i < N; i++) {
			vec.push_back(1);
		}
		int count_3 = 0;	//3이 처음으로 합쳐졌을때를 구함
		if (N == 1) {
			cout << 1<<endl;
		}
		else if (N == 2) {
			cout << 2<<endl;
		}
		else if (N == 3) {
			cout << 4<<endl;
		}
		else {
			while (1) {
				int arr[4] = { 0,0,0,0 };

				int sum = 0;
				int check[2] = { 0,0 };	//2가 들어왔는지 확인
				if (vec[vec.size() - 1] == 2) { check[0] = 1; }
				sum += vec[vec.size() - 1];
				vec.pop_back();
				if (vec[vec.size() - 1] == 2) { check[1] = 1; }
				else if (vec[vec.size() - 1] == 3) { break; }
				sum += vec[vec.size() - 1];
				vec.pop_back();
				if (sum == 3 || sum == 4) {
					count_3++;
					vec.clear();
					for (int i = 0; i < count_3; i++) { vec.push_back(3); }
					for (int i = 0; i < N - 3 * count_3; i++) {
						vec.push_back(1);
					}
				}
				else if (sum <= 3) { vec.push_back(sum); }
				else if (sum == 4 && check[0] && check[1]) { vec.push_back(3); vec.push_back(1); }
				else break;
				sort(vec.begin(), vec.end(), greater<int>());
				for (int i = 0; i < vec.size(); i++) {
					if (vec[i] == 1) { arr[1]++; }
					else if (vec[i] == 2) { arr[2]++; }
					else if (vec[i] == 3) { arr[3]++; }
				}

				result += comb(vec.size(), arr[3]) * comb(vec.size() - arr[3], arr[2]) * comb(vec.size() - arr[3] - arr[2], arr[1]);
			}
			cout << result<<endl;
		}
	}
}



//지난 번에 풀었을 때는 어떻게 풀어야할지 감이 오지않아 무작정 코드를 작성했다.
//요번에 다시 풀때에는 재귀문을 이용해서 더욱 간단하고 빠르게 다시 코드를 작성했다.
#include<iostream>
#include<algorithm>
#include<vector>

#define endl "\n"

using namespace std;

int T, N;
int arr[11];
int val[3] = { 1,2,3 };
int result = 0;

void solve(int x) {
	int sum = 0;
	for (int i = 0; i < x; i++) {
		sum += arr[i];
	}
	if (sum == N) {
		result++;
	}
	else if (sum > N) {
		return;
	}
	for (int i = 0; i < 3; i++) {
		arr[x] = val[i];
		solve(x + 1);
	}
}

int main(void) {
	cin >> T;
	for (int i = 0; i < T; i++) {
		cin >> N;
		solve(0);
		cout << result<<endl;
		result = 0;
		for (int i = 0; i < 11; i++) { arr[i] = 0; }
	}
}



//점화식을 이용해서 다시 간단하게 짜보았다!
#include<iostream>
#include<algorithm>
#include<vector>
#define endl "\n"

using namespace std;

int N;
int T;
int val[3] = { 1,2,3 };
bool visited[3];
int dp[100001];
int result = 0;

void Input() {
	cin >> N;
}
void Solution() {
	dp[1] = 1;
	dp[2] = 2;
	dp[3] = 4;
	for (int i = 4; i <= N; i++) {
		dp[i] = dp[i - 3] + dp[i - 2] + dp[i - 1];
	}
	cout << dp[N];
}

void Solve() {
		Input();
		Solution();
}
int main(void) {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	Solve();
}
