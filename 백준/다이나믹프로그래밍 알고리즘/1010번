#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>
#include<string>
#include<memory.h>

using namespace std;

long long N,M;
void Input() {
	cin >> N>>M;
}

long long dp[33][33];

long long  DP(int n, int m) {
	if (n > m||n<=0||m<=0) { return 0; }

	long long& res = dp[n][m];
	if (res != -1) { return res; }
	res = 0;
	for (int i = m-1; i >= n-1; i--) {
		res += DP(n - 1, i);
	}
	return res;
			
}

void Solve() {
	memset(dp, -1, sizeof(dp));
	for (int i = 1; i <= M; i++) { dp[1][i] = i; }
	for (int i = 1; i <= N; i++) { dp[i][i] = 1; }
	cout<<DP(N, M)<<endl;
}

int main(void) {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	int T;
	cin >> T;
	for (int i = 0; i < T; i++) {
		Input();
		Solve();
	}
}
