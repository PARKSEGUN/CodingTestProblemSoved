DP가 아닌 BFS로 해결할 수 있지않을까서 도전했지만 메모리 초과가 계속 발생했다 
확실히 문제에 따라 최적화된 알고리즘이 있다는것을 다시한번 알게되었다!-----------------------------------
#include<iostream>
#include<algorithm>
#include<vector>
#include<climits>
#include<cmath>
#include<queue>

#define endl "\n"
using namespace std;
int N, M;
int map[1111][1111];
void Input() {
	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> map[i][j];
		}
	}
}
queue<pair<int, int>> q;
queue<int> candy;
int dix[3] = { 1,0,1 };
int diy[3] = { 0,1,1 };
int result;
int val[1111][1111];

void Solution() {
	q.push({ 0,0 });
	candy.push(map[0][0]);
	val[0][0] = map[0][0];
	while (q.size() != 0) {
		int x = q.front().first;
		int y = q.front().second;
		int cnt = candy.front();
		q.pop(); candy.pop();
		if (x == N - 1 && y == M - 1) { result = max(result, cnt); }
		else {
			for (int i = 0; i < 3; i++) {
				int dx = x + dix[i];
				int dy = y + diy[i];
				if (dx >= 0 && dx < N && dy >= 0 && dy < M) {
					 if (val[dx][dy] <cnt+map[dx][dy]) {
						q.push({ dx,dy });
						candy.push(cnt + map[dx][dy]);
					}
				}
			}
		}
	}
	cout << result;
}


int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Input();
	Solution();
}
DP로 다시 해결해보자---------------------------------------------------
DP가 아닌 BFS로 해결할 수 있지않을까서 도전했지만 메모리 초과가 계속 발생했다 
확실히 문제에 따라 최적화된 알고리즘이 있다는것을 다시한번 알게되었다!-----------------------------------
#include<iostream>
#include<algorithm>
#include<vector>
#include<climits>
#include<cmath>
#include<queue>

#define endl "\n"
using namespace std;
int N, M;
int map[1111][1111];
void Input() {
	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> map[i][j];
		}
	}
}
queue<pair<int, int>> q;
queue<int> candy;
int dix[3] = { 1,0,1 };
int diy[3] = { 0,1,1 };
int result;
int val[1111][1111];

void Solution() {
	q.push({ 0,0 });
	candy.push(map[0][0]);
	val[0][0] = map[0][0];
	while (q.size() != 0) {
		int x = q.front().first;
		int y = q.front().second;
		int cnt = candy.front();
		q.pop(); candy.pop();
		if (x == N - 1 && y == M - 1) { result = max(result, cnt); }
		else {
			for (int i = 0; i < 3; i++) {
				int dx = x + dix[i];
				int dy = y + diy[i];
				if (dx >= 0 && dx < N && dy >= 0 && dy < M) {
					 if (val[dx][dy] <cnt+map[dx][dy]) {
						q.push({ dx,dy });
						candy.push(cnt + map[dx][dy]);
					}
				}
			}
		}
	}
	cout << result;
}


int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Input();
	Solution();
}
DP로 다시 해결해보자---------------------------------------------------
#include<iostream>
#include<algorithm>
#include<vector>
#include<climits>
#include<cmath>
#include<queue>

#define endl "\n"
using namespace std;
int N, M;
int map[1111][1111];
void Input() {
	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> map[i][j];
		}
	}
}
int DP[1111][1111];
int dix[4] = { 1,1,0 };
int diy[4] = { 0,1,1 };
void print() {
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cout << DP[i][j]<<" ";
		}cout << endl;
	}
}
void Solution() {
	DP[0][0] = map[0][0];
	for (int i = 1; i < M; i++) {
		DP[0][i] = DP[0][i - 1] + map[0][i];
	}
	for (int i = 1; i < N; i++) {
		DP[i][0] = DP[i-1][0] + map[i][0];
	}
	for (int i = 1; i < N; i++) {
		for (int j = 1; j < M; j++) {
			DP[i][j] = map[i][j] + max(DP[i - 1][j], DP[i][j - 1]);
		}
	}
	cout << DP[N-1][M-1];
	//print();
}


int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Input();
	Solution();
}
