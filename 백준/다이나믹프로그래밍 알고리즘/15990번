//처음에 풀었던 방법은 완전탐색 알고리즘으로 해결하려 했는데 시간 초과가 발생했다.
#include<iostream>
#include<algorithm>
#include<vector>
#define endl "\n"

using namespace std;

int N;
int T;
int val[3] = { 1,2,3 };
bool visited[3];
int arr[100001];
int result = 0;

void Input() {
	cin >> N;
}
void Solution(int cnt,int sum,int before) {
	if (sum == N) {
		result ++ ;
	}
	else if (sum > N){ return; }

	for (int i = 0; i < 3; i++) {
		if (val[i] != before) {
			arr[cnt] = val[i];
			Solution(cnt + 1, sum + val[i], val[i]);
		}
	}
}
void Solve() {
	cin >> T;
	for (int t = 0; t < T; t++) {
		result = 0;
		Input();
		Solution(0, 0, 0);
		cout << result<<endl;
	}
}
int main(void) {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	Solve();
}



//그 다음으로 생각해서 작성했던 코드는 각각의 값 뒤에 수를 파악하고 그 수에맞는 경우만 더해주는 식으로 작성했지만 1000000009 를 마지막에 나머지정리를 해주는 과정에서
//오류가 발생했는데 찾지 못했다.
#include<iostream>
#include<algorithm>
#include<vector>
#define endl "\n"

using namespace std;

int N;
int T;

long long  dp_123[100001][4];//점화식을 이용해서 N-3부터 배열을 확인할때 뒷자리에 1,2,3 개수가 몇개인지 판단하기위해

int result = 0;
long long  dp[100001];
void Input() {
	cin >> N;
}
void Solution() {
	dp[1] = 1;
	dp[2] = 1;
	dp[3] = 3;
	dp_123[1][1] = 1;
	dp_123[2][2] = 1;
	dp_123[3][1] = 1; dp_123[3][2] = 1; dp_123[3][3] = 1;
	for (int i = 4; i <= N; i++) {
		dp[i] += (dp[i - 3] - dp_123[i - 3][3]) % 1000000009;	dp_123[i][3] = (dp[i - 3] - dp_123[i - 3][3]);
		dp[i] += (dp[i - 2] - dp_123[i - 2][2]) % 1000000009;	dp_123[i][2] = (dp[i - 2] - dp_123[i - 2][2]);
		dp[i] += (dp[i - 1] - dp_123[i - 1][1]) % 1000000009;	dp_123[i][1] = (dp[i - 1] - dp_123[i - 1][1]);
	}
	cout << dp[N] << endl;
}

void Solve() {
	cin >> T;
	for (int t = 0; t < T; t++) {
		Input();
		Solution();
		for (int i = 0; i <= N; i++) { dp[i] = 0; }
	}
}
int main(void) {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	Solve();
}


//그 다음에 작성했던 코드는
//2차원 배열을 두고 뒤에는 마지막 값이 1,2,3 중에 어떤것인지 넣어주게되면
//마지막 값이 1인 것들을 마지막 값이 2,3 인 애들을 합쳐주면 되는것처럼 흘러간다.
#include<iostream>
#include<algorithm>
#include<vector>
#define endl "\n"

using namespace std;

int N;
int T;
int result = 0;
long long  dp[100001][4];

void Input() {
	cin >> N;
}
void Solution() {
	dp[1][1] = dp[2][2] = dp[3][1] = dp[3][2] = dp[3][3] = 1;

	for (int i = 4; i <= N; i++) {
		dp[i][1] = dp[i - 1][2] + dp[i - 1][3]% 1000000009;
		dp[i][2] = dp[i - 2][1] + dp[i - 2][3] % 1000000009;
		dp[i][3] = dp[i - 3][2] + dp[i - 3][1] % 1000000009;
	}
	cout << (dp[N][1]+dp[N][2]+dp[N][3]) % 1000000009 << endl;
}

void Solve() {
	cin >> T;
	for (int t = 0; t < T; t++) {
		Input();
		Solution();
	}
}
int main(void) {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	Solve();
}
