이번 문제에서는 어떤식으로 다이나믹프로그래밍이 사용되었는지 유형을 암기하고
다이나믹프로그래밍은 큰 문제가 작은 문제로 나눠지는지, 또 그 나눠진 작은 문제들이 서로 중복이 일어나는지를 확인하고 dp를 작성해준다.
문제해결할 정도로 아직 다이나믹프로그래밍 알고리즘이 잡히지않았다
문제를 보고 어떻게 다이나믹프로그래밍에 맞춰나갈 수 있을지 더 많은 문제를 접해보자

처음에는 dp[a]=b 즉 a원을 채우기 위한 경우의 수는 b 라고 설정하고 해결을 하려했지만
다른 dp들을 채워나가는 중에 경우의수가 중복이 된것이 겹쳐져서 제대로 값이 출력되지않았다.
중복되는 경우의 수를 해결해야 될 방법을 찾지 못했다.


#include<iostream>

using namespace std;

int N,K;
int coin[111];
int dp[11111];

void input() {
	cin >> N >> K;
	for (int i = 0; i < N; i++) { cin >> coin[i]; }
}

void solve() {
	dp[0] = 1;
	for (int i = 0; i < N; i++) {
		for (int j = coin[i]; j <= K; j++) {
			dp[j] += dp[j - coin[i]];
		}
	}
	cout << dp[K];
}

int main(void) {
	input();
	solve();
}
