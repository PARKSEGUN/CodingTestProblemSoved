어떤 방법으로 탐색을 해야 시간을 절약하면서 올바른 답을 찾아갈지만 생각해서 답을 찾지 못했던 문제이다.
너무 한가지 방법을 깊게 파서 시간 낭비했다.
결국 구글링을했고, 가장 큰 값이 나오는 방법은 경우의 수를 탐색을 하는것이아니라 곡의 순서에 따라 나올 수있는 값들의 유무를 저장하는 것이 해답이였다.
한가지 방법만 고집하지말고 다른 여러 방법을 시도해보고 알맞은 알고리즘 찾는 것이 해결에 좋은 방법이라는 것을 알았다.


#include<iostream>
#include<algorithm>
#include<vector>
#include<climits>
#include<cmath>
#include<queue>

#define endl "\n"
using namespace std;

int N, S, M;
int arr[55];
void Input() {
	cin >> N >> S >> M;
	for (int i = 0; i < N; i++) { cin >> arr[i]; }
}
bool dp[55][11111];
void DP(int cnt) {
	if (cnt > N) { return; }
	for (int i = 0; i <= M; i++) {
		if (dp[cnt - 1][i] == true) {
			if (i + arr[cnt - 1] >= 0 && i + arr[cnt - 1] <= M)	dp[cnt][i + arr[cnt - 1]] = true;
			if (i - arr[cnt - 1] >= 0 && i - arr[cnt - 1] <= M)	dp[cnt][i - arr[cnt - 1]] = true;
		}
	}
	DP(cnt + 1);
}

void Solution() {
	Input();

	dp[0][S] = true;
	DP(1);
	//for (int i = 0; i <= N; i++) {
	//	for (int j = 0; j <= M; j++)
	//	{
	//		cout << dp[i][j] << " ";
	//	}cout << endl;
	//}

	for (int i = M; i >= 0; i--) { if (dp[N][i] == true) { cout << i; exit(0); } }
	cout << -1;
}

int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Solution();
}
