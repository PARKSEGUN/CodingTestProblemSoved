#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<cmath>
#include<vector>
//#include<windows.h>

#define endl "\n"

using namespace std;

int N;
int map[22][22];


void Input() {
	cin >> N;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			cin >> map[i][j];
		}
	}
}
void right() {

}
void down() {

}
void rightDown() {

}
int result;
void DFS(int x,int y,int dir) {		//방향 0 가로, 1 세로 , 2 대각선
	if (x > 0 && x <= N && y > 0 && y <= N) {
		if (x == N && y == N) { result++; return; }
		if (dir == 0) {
			if(map[x][y+1]!=1)DFS(x, y + 1, 0);
			if (map[x][y + 1] != 1&& map[x+1][y + 1] != 1&& map[x+1][y] != 1)DFS(x + 1, y + 1, 2);
		}
		else if (dir == 1) {
			if (map[x+1][y] != 1)DFS(x+1, y , 1);
			if (map[x][y + 1] != 1 && map[x + 1][y + 1] != 1 && map[x + 1][y] != 1)DFS(x + 1, y + 1, 2);
		}
		else if (dir == 2) {
			if (map[x][y + 1] != 1)DFS(x, y + 1, 0);
			if (map[x + 1][y] != 1)DFS(x + 1, y, 1);
			if (map[x][y + 1] != 1 && map[x + 1][y + 1] != 1 && map[x + 1][y] != 1)DFS(x + 1, y + 1, 2);
		}
	}
}
 
void Solve() {
	DFS(1, 2,0);
	cout << result;
}

int main(void) {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	Input();
	Solve();
}
