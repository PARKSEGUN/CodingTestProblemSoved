//반례를 혼자서 찾는 습관을 갖자
//문제가 틀리다면 적어도 30분동안은 반례를 찾아보자
//내가 가져오는 값이 0이면 안되었었고 다시 원래자리로 돌아갈때에도 0이면 안된다라는 조건이 필요했다.
#include<iostream>
#include<cmath>
#include<algorithm>
#include<climits>
#define endl "\n"

using namespace std;

bool visited[10];
int visited_val[10][10];
int N;
int arr[10];
int result=INT_MAX;
int start_point;		//출발한 지점
void solve(int cnt,int start) {
	if (cnt == N-1&& visited_val[start][start_point]!=0) {
		int sum =visited_val[start][start_point];
		for (int i = 0; i < N-1; i++) { sum += arr[i]; }
		result = min(sum, result);
	}
	for (int i = 0; i < N; i++) {
		if (!visited[i]&& visited_val[start][i] != 0) {
			visited[i] = true;
			arr[cnt] = visited_val[start][i];
			solve(cnt + 1, i);
			visited[i] = false;
		}
	}
}
int main(void) {
	cin >> N;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> visited_val[i][j];
		}
	}
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (visited_val[i][j] != 0) {
				start_point = i;
				visited[i] = true;
				visited[j] = true;
				arr[0] = visited_val[i][j];
				solve(1, j);
				visited[i] = false;
				visited[j] = false;
			}
		}
	}
	cout << result;
}
