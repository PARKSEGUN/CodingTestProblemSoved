궁수를 배치하는 방법을 DFS로 돌려주고 위치가 정해지면 궁수마다 가장 가까우면서 가장왼쪽에있는 적들을 저장해서 한번에 제거한다
(저장하는 이유는 중복이 허용가능 이기 때문이다)
그리고 맵의 한줄씩 내려주면서 적이 다 제거 되었을때에 result 값을 최대값을 유지시키면서 궁수의 위치를 DFS 돌려준다.

#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
#include<cmath>
#include<vector>
//#include<windows.h>

#define endl "\n"
int N, M, D;
int map[22][22];
int submap[22][22];
using namespace std;


void Input() {
	cin >> N >> M >> D;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> map[i][j];
			submap[i][j] = map[i][j];
		}
	}
}
void print() {
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cout << submap[i][j] << " ";
		}cout << endl;
	}
}
void copy() {
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			submap[i][j] = map[i][j];
		}
	}
}
int sum;
vector<pair<int, int>> vec;
void attack(int a) {
	int x = 0, y = 0, d = D;
	bool chk = 0;
	for (int i = 0; i < N; i++) {
		for (int j = M - 1; j >= 0; j--) {
			if (submap[i][j] == 1) {
				int dd = abs(N - 1 - i) + abs(a - j) + 1;
				if (d > dd) {
					d = dd; x = i, y = j; chk = 1;
				}
				else if (d == dd) {
					if (chk == 1) {
						if (y > j) {
							d = dd; x = i, y = j; chk = 1;
						}
					}
					else {
						d = dd; x = i, y = j; chk = 1;
					}
				}
			}
		}
	}
	if (chk == 1) {
		vec.push_back({ x,y });
	}
}
int arr[3];
int result;
void down() {
	for (int i = N - 1; i >= 1; i--) {	//한칸 내리기
		for (int j = 0; j < M; j++) {
			submap[i][j] = submap[i - 1][j];
		}
	}
	for (int j = 0; j < M; j++) {
		submap[0][j] = 0;
	}
}
bool confirm() {
	for (int i = N - 1; i >= 1; i--) {	//적이 있는지 확인
		for (int j = 0; j < M; j++) {
			if (submap[i][j] == 1) {
				return false;
			}
		}
	}
	return true;		// 적이 없다면 참
}
void enemyKill() {
	for (int i = 0; i < vec.size(); i++) {
		if (submap[vec[i].first][vec[i].second] == 1) {
			submap[vec[i].first][vec[i].second] = 0;
			sum++;
		}
	}
	vec.clear();
}
void archer(int cnt, int range) {
	if (cnt == 3) {	//궁수 3명의 위치가 정해졌을때
		while (confirm() == false) {
			attack(arr[0]);
			attack(arr[1]);
			attack(arr[2]);
			enemyKill();
			//cout << endl; print();
			//cout << arr[0] << " " << arr[1] << " " << arr[2]<<endl;
			//system("pause");
			down();


		}

		result = max(result, sum); sum = 0;
		copy();
	}
	else {
		for (int i = range; i < M; i++) {
			arr[cnt] = i;
			archer(cnt + 1, i + 1);
		}
	}
}

void Solve() {
	archer(0, 0);
	cout << result;
}

int main(void) {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	Input();
	Solve();
}
