
//이 코드를 돌리게 되면 연산자들이 중복되는 자리에 들어가는 경우가 너무나 많아서 시간 초과가 발생하게된다.
//어떻게 하면 시간 초과를 없앨 수 있을까 생각했고, 4가지 종류의 연산자들의 위치를 기억하는 변수를 생성해서 방문의 여부를 검사하는 방식을 생각해봤지만,
//연산자들의 수가 입력받는 값에 의해 변하기 때문에 나타낼 수 없었고, 블로그를 확인했다.
//블로그에서 확인했던 풀이방법은 각 4가지의 '연산자의 개수'를 사용해서 풀이를 했다. 내가 풀었던방법은 입력받은
//'연산자의 개수를 직접 배열에 1,2,3,4 로 나타내서' 넣어서 DFS로 나타냈기에 중복이 발생했던것이다.

////////////////////////////////////////시간 초과 코드
#include<iostream>
#include<algorithm>
#include<vector>
#include<climits>
#include<cmath>
#include<queue>
#include<string>
#include<deque>
#include<queue>

#define endl "\n"

using namespace std;

int N;
int input[15];		//입력 받는 value 값
vector<int> vec;		//입력받은 연산자의 값
bool visited[15];		//방문여부
int arr[15];		//자리가 정해진 연산자들의 종류를 저장
int MAX = INT_MIN;
int MIN = INT_MAX;

void Input() {
	cin >> N;
	for (int i = 0; i < N; i++) { cin >> input[i]; }
	for (int i = 1; i <= 4; i++) {
		int a;
		cin >> a;
		for (int k = 0; k < a; k++) { vec.push_back(i); }
	}

	//for (int i = 0; i < vec.size(); i++) { cout << vec[i] << " "; }cout << endl;
}

void Solution(int cnt) {
	if (cnt == N - 1) {
		int VAL = input[0];
		for (int i = 0; i < cnt; i++) {
			cout << arr[i] << " ";
			if (arr[i] == 1) { VAL = VAL + input[i + 1]; }
			else if (arr[i] == 2) { VAL = VAL - input[i + 1]; }
			else if (arr[i] == 3) { VAL = VAL * input[i + 1]; }
			else if (arr[i] == 4) { VAL = VAL / input[i + 1]; }
		}cout << endl;
		MAX = max(MAX, VAL);
		MIN = min(MIN, VAL);
	}

	for (int i = 0; i < vec.size(); i++) {
		if (!visited[i]) {
			visited[i] = true;
			arr[cnt] = vec[i];
			if(cnt+1<=N-1){ Solution(cnt + 1); }
			visited[i] = false;
		}
	}
}

void Solve() {
	Input();
	Solution(0);
	cout << MAX << endl << MIN;
}

int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Solve();
}

//////////////////////////////////////////////////////수정코드

#include<iostream>
#include<algorithm>
#include<vector>
#include<climits>
#include<cmath>
#include<queue>
#include<string>
#include<deque>
#include<queue>

#define endl "\n"

using namespace std;

int N;
int input[15];		//입력 받는 value 값
int MAX = INT_MIN;
int MIN = INT_MAX;
int Plu, Min, Mul, Div;


void Input() {
	cin >> N;
	for (int i = 0; i < N; i++) { cin >> input[i]; }
	cin >> Plu >> Min >> Mul >> Div;

	//for (int i = 0; i < vec.size(); i++) { cout << vec[i] << " "; }cout << endl;
}

void Solution(int pl,int mi,int mu,int di,int idx,int sum) {
	if (idx == N-1) {
		MAX = max(sum, MAX);
		MIN = min(sum, MIN);
		return;
	}


	if (pl < Plu) {
		Solution(pl + 1, mi, mu, di, idx + 1,sum+input[idx+1]);
	}
	if (di < Div) {
		Solution(pl, mi, mu, di+1, idx + 1, sum / input[idx + 1]);
	}
	if (mu < Mul) {
		Solution(pl, mi, mu+1, di, idx + 1, sum * input[idx + 1]);
	}
	if (mi < Min) {
		Solution(pl, mi+1, mu, di, idx + 1, sum - input[idx + 1]);
	}
}

void Solve() {
	Input();
	Solution(0,0,0,0,0,input[0]);
	cout << MAX << endl << MIN;
}

int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Solve();
}


