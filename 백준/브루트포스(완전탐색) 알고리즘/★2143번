//두 배열의 합으로 이루어진 배열을 만들어주고 그 합의 개수가 각각 몇개있는지를 세운다음에 각각 배열의 합을 더한값이 T가 되었을때에 그 개수를 각각 더해주는 식으로 해결하였지만
//시간 초과가 발생하였다.

#include<iostream>
#include<string>
#include<vector>
#include<algorithm>

#define endl "\n"
#define MAX 1000000
using namespace std;

int T, N, M;
int A[1111];
int B[1111];


void Input() {
	cin >> T;
	cin >> N;
	for (int i = 0; i < N; i++) { cin >> A[i]; }
	cin >> M;
	for (int i = 0; i < M; i++) { cin >> B[i]; }
}

int Answer(int x) {
	int result = 0;
	for (int i = 0; i < M; i++) {
		int sum = 0;
		for (int j = i; j < M; j++) {
			sum += B[j];
			if (sum == T - x) { result++; }
			else if (sum > T - x) { break; }
		}
	}
	return result;
}
int result = 0;
vector<int> AA;
vector<int> BB;

void Solution() {
	for (int i = 0; i < N; i++) {
		int sum = 0;
		for (int j = i ; j < N; j++) {
			sum += A[j];
			if (sum < T) {
				AA.push_back(sum);
			}
		}
	}
	for (int i = 0; i < M; i++) {
		int sum = 0;
		for (int j = i; j < M; j++) {
			sum += B[j];
			if (sum < T) {
				BB.push_back(sum);
			}
		}
	}
	sort(AA.begin(), AA.end());
	sort(BB.begin(), BB.end(),greater<int>());
	//for (int i = 0; i < AA.size(); i++)
	//{
	//	cout << AA[i] << " ";
	//}cout << endl;
	//for (int i = 0; i < BB.size(); i++)
	//{
	//	cout << BB[i] << " ";
	//}cout << endl;

	vector<int>Acnt[2];
	Acnt[0].push_back(AA[0]); Acnt[1].push_back(1);
	vector<int>Bcnt[2];
	Bcnt[0].push_back(BB[0]); Bcnt[1].push_back(1);
	for (int i = 1; i < AA.size(); i++) {
		if (AA[i] == Acnt[0][Acnt[0].size()-1]) {
			Acnt[1][Acnt[0].size() - 1]++;
		}
		else {
			Acnt[0].push_back(AA[i]);
			Acnt[1].push_back(1);
		}
	}
	for (int i = 1; i < BB.size(); i++) {
		if (BB[i] == Bcnt[0][Bcnt[0].size() - 1]) {
			Bcnt[1][Bcnt[0].size() - 1]++;
		}
		else {
			Bcnt[0].push_back(BB[i]);
			Bcnt[1].push_back(1);
		}
	}

	//for (int i = 0; i < Acnt[0].size(); i++) { cout << Acnt[0][i] << " "; }cout << endl;
	//for (int i = 0; i < Acnt[1].size(); i++) { cout << Acnt[1][i] << " "; }cout << endl;
	//for (int i = 0; i < Bcnt[0].size(); i++) { cout << Bcnt[0][i] << " "; }cout << endl;
	//for (int i = 0; i < Bcnt[1].size(); i++) { cout << Bcnt[1][i] << " "; }cout << endl;

	for (int i = 0; i < Acnt[0].size(); i++) {
		for (int j = 0; j < Bcnt[0].size(); j++) {
			if (Acnt[0][i] + Bcnt[0][j] == T) {
				result += Acnt[1][i] * Bcnt[1][i];
				break;
			}
		}
	}

	cout << result;
}

void Solve() {
	Input();
	Solution();
}

int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Solve();

	return 0;
}


//새롭게 접한 알고리즘 lower_bound, upper_bound
//혹시나 해서 lower_bound와 upper_bound가 의미하는 행동을 직접 구현해 봤지만 역시 시간초과가 발생했다.
//왜 발생했는지는 질문해보자
#include<iostream>
#include<string>
#include<vector>
#include<algorithm>

#define endl "\n"
#define MAX 1000000
using namespace std;

int T, N, M;
int A[1111];
int B[1111];


void Input() {
	cin >> T;
	cin >> N;
	for (int i = 0; i < N; i++) { cin >> A[i]; }
	cin >> M;
	for (int i = 0; i < M; i++) { cin >> B[i]; }
}
long long result = 0;
vector<int> AA;
vector<int> BB;

void Solution() {
	for (int i = 0; i < N; i++) {
		int sum = 0;
		for (int j = i ; j < N; j++) {
			sum += A[j];
				AA.push_back(sum);
		}
	}
	for (int i = 0; i < M; i++) {
		int sum = 0;
		for (int j = i; j < M; j++) {
			sum += B[j];
				BB.push_back(sum);
		}
	}
	sort(AA.begin(), AA.end());

	for (int i = 0; i < BB.size(); i++) {
		int low = lower_bound(AA.begin(), AA.end(), T - BB[i])-AA.begin();
		int high = upper_bound(AA.begin(), AA.end(), T - BB[i]) - AA.begin();

		result += high - low;
	}
	cout << result;
}

void Solve() {
	Input();
	Solution();
}

int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Solve();

	return 0;
}
