먼저 그룹을 두가지로 나눠주는 함수를만들어주었고(모든 경우의 수를 확인)
그다음 나누어진 그룹이 올바르게 열결된 그룹인지를 확인하는 함수를 작성하고
두가지의 그룹이 둘다 참일때 최솟값을 유지하게 만들었다.
그룹이 참인지를 판별하는 함수에서 반례가 발생하였지만 n개의 구역이 올바르게 연결되기 위해서는 n-1 개의 간선이 필요하다는 조건문을 추가했다.

#include <algorithm>
#include <cmath>
#include <iostream>
#include <queue>
#include <vector>


#define endl "\n"

using namespace std;

int N;
int population[11];
vector<vector<int>> link;

void Input() {
	cin >> N;
	for (int i = 0; i < N; i++) { cin >> population[i]; }
	for (int i = 0; i < N; i++) {
		int n;
		cin >> n;
		vector<int> vec;
		for (int j = 0; j < n; j++) {
			int a;
			cin >> a;
			vec.push_back(a-1);
		}
		link.push_back(vec);
	}
}

bool trueGroup(vector<int> v1) {
	if (v1.size() == 1) { return true; }
	int cnt = 0;
	bool chk[11] = { 0, };
	for (int i = 0; i < v1.size(); i++) {
		for (int j = i + 1; j < v1.size(); j++) {
			for (int k = 0; k < link[v1[i]].size(); k++) {
				if (link[v1[i]][k] == v1[j]) {
					cnt++;
					chk[i] = true; chk[j] = true;
					bool tmp = true;
					for (int ii = 0; ii < v1.size(); ii++) {
						tmp &= chk[ii];
					}
					if (tmp == true&&cnt>=v1.size()-1) { return true; }
				}
			}
		}
	}
	return false;
}

int arr[11];
int result=987654321;
void DFS(int cnt,int range) {
	if (cnt > 0 && cnt < N) {
		bool chk[11]={0,};
		vector<int> v1;
		for (int i = 0; i < cnt; i++) { v1.push_back(arr[i]); chk[arr[i]] = true; };
		vector<int> v2;
		for (int i = 0; i < N; i++) { if (chk[i] == false) { v2.push_back(i); } };
		if (trueGroup(v1) && trueGroup(v2)) {
			int sum1 = 0, sum2 = 0;
			for (int i = 0; i < v1.size(); i++) { sum1 += population[v1[i]]; }
			for (int i = 0; i < v2.size(); i++) { sum2 += population[v2[i]]; }
			result = min(result, abs(sum1 - sum2));
		}

	}
		for (int i = range; i < N; i++) {
			arr[cnt] = i;
			DFS(cnt + 1, i + 1);
		}
}

void Solve() {
	DFS(0, 0);
	if (result == 987654321) { result= -1; }
	cout << result;
}

int main(void) {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	Input();
	Solve();
}
