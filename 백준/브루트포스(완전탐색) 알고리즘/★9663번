//문제 그대로 재귀문을 사용해서 행과 열과 대각선을 파악해서 벡터에 넣어주어서 일일이 비교해보는 코드를 짜고있었지만, 중복되는 경우를 없애는 방법을 알아내지 못했고,
//어떤식으로 해결할 수 있을지 블로그를 확인했다.
//블로그에서는 이 퀸을 놓을 수 있는 규칙을 먼저 알아낸 뒤에 코드로 옮겨놓았다.
//문제를 읽고 바로 달려들지말고 어떻게 코드를 작성할 것인지 먼저 계획을 세워보고 코드를 작성하는 습관을 들이자.


#include<iostream>
#include<algorithm>
#include<vector>
#include<climits>
#include<cmath>
#include<queue>
#include<string>
#include<deque>
#include<queue>

#define endl "\n"

using namespace std;

int N;
int result = 0;

void Input() {
	cin >> N;
}
int visited[15];

bool Check(int x) {
	for (int i = 0; i < x; i++) {
		if (visited[x] == visited[i] || x - i == abs(visited[x] - visited[i])) {
			return false;
		}
	}
	return true;
}



void Queen(int x) {
	if (x == N) {  result++; return; }
	for (int i = 0; i < N; i++) {
		visited[x] = i;
		if (Check(x) == true) {
			Queen(x + 1);
		}
	}
}

void Solution() {
	Queen(0);
	cout << result;
}

void Solve() {
	Input();
	Solution();
}

int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	Solve();
}




