나의 단점을 확실하게 알게 해주는 문제였다.
문제를 처음 본후에 너무나도 간단한 문제라고 생각하고 금방 코딩을 하고 제출했지만 역시나 틀린답이였다.
시간초과가 발생했고 그때서야 확인해보니 범위가 1000*1000*1000*1000 인 말도 안되는 범위에 코드를 작성했다.
무작정 문제대로 코드를 작성하는 것이 아니라 문제를 보고 어떤식으로 코드를 작성해야 효율적으로 작성할 수 있을지를 생각했어야했다.
항상 알고리즘 관련문제만 풀다가 '구현' 문제를 만나니까 해결 방법을 생각할 수 없었다.
수학관련된 문제를 많이 접해보자. 구현관련된 문제를 많이 접해보자.
문제를 보고 너무 급하게 해결하려하지말고 어떻게 문제를 해결할 것인지, 문제에서의 중요한 키포인트를 찾는 습관을 들이고, 어떻게하면 조금더 효율적으로 작성할 수 있을지
생각 해보는 습관을 기르자.

#include <algorithm>
#include <cmath>
#include <iostream>
#include <queue>
#include <vector>
#include<climits>

#define endl "\n"

using namespace std;
int N, M;
int arrA[1111][1111];
int row[1111];
int col[1111];
int sum;
int result = -987654321;
void Input() {
	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> arrA[i][j];
		}
	}
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if ((i == 0 && j == 0) || (i == N - 1 && j == 0) || (i == N - 1 && j == M - 1) || (i == 0 && j == M - 1)) {
				row[i] += arrA[i][j];
				col[j] += arrA[i][j];
				sum += arrA[i][j];
			}
			else if (i == 0 || i == N - 1 || j == 0 || j == M - 1) {
				row[i] += arrA[i][j]*2;
				col[j] += arrA[i][j]*2;
				sum += arrA[i][j]*2;
			}
			else {
				row[i] += arrA[i][j]*4;
				col[j] += arrA[i][j]*4;
				sum += arrA[i][j]*4;
			}
		}
	}
	result = sum;
}



void Solve() {
	for (int i = 1; i < N-1; i++) {
		result = max(result, sum - row[i] / 2 + row[0] );
		result = max(result, sum - row[i] / 2 + row[N-1] );
	}
	for (int i = 1; i < M - 1; i++) {
		result = max(result, sum - col[i] / 2 + col[0] );
		result = max(result, sum - col[i] / 2 + col[M - 1]);
	}
	cout << result;
}

int main(void) {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	Input();
	Solve();
}
