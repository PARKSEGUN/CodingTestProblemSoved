이번 문제를 해결하기 위해 생각했던 것은BFS탐색을 사용하고 visited 변수를 사용하고 사이클이 완성되는 조건이 무엇인지를 생각해보았다.
사이클이 만들어지기 위해서는 BFS탐색중에 어떠한 정점을 탐색하고 있는 중에 바로 이전에 탐색했던 장소를 제외하고 내가 이전에 방문을 했고 자신과 같은 모양의 점을 만나게된다면
그 모양은 사이클이 만들어진다는 것을 알게되었습니다.
예를들면 (0,0)에서 탐색할 수있는 정점은 (0,1) 과 (1,0)이 있습니다 또 (0,1)은 (0,2)와 (1,1) 를 탐색하고 (1,0)은 (2,0)과 (1,1) 을 탐색하게 되고 
이때 (1,0)의 바로 이전에 정점이였던 (0,0)을 제외하고 (1,1)이라는 이전에 방문을 했고 자신과 같은 모양의 점이라는 조건이 성립하기에 사이클이 완성됩니다.


#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
#include<queue>

#define endl "\n"

using namespace std;

int N, M;
char map[55][55];
bool alp[26];		//어떤 알파벳이 사용되었는지 저장

void Input() {
	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		string str;
		cin >> str;
		for (int j = 0; j < M; j++) {
			map[i][j] = str[j];
			alp[ str[j]-'A'] = true;
		}
	}
}
bool visited[55][55];
queue<int>q[4];
int dix[4] = { 0,0,1,-1 };
int diy[4] = { 1,-1,0,0 };
void BFS(int xx,int yy,char alpha) {
	int x=xx, y=yy;
	visited[x][y] = true;
	q[0].push(x);	q[1].push(y);	q[2].push(-1);	q[3].push(-1);
	int bx=-1, by=-1;
	while (q[0].size() != 0) {
		x = q[0].front(); y = q[1].front();
		bx = q[2].front(); by = q[3].front();
		q[0].pop(); q[1].pop(); q[2].pop(); q[3].pop();
		for (int i = 0; i < 4; i++) {
			int dx = x + dix[i];
			int dy = y + diy[i];
			if (dx >= 0 && dx < N && dy>=0 && dy < M) {
				if (visited[dx][dy] == false) {
					if (map[dx][dy] == alpha) {
						q[0].push(dx); q[1].push(dy); q[2].push(x); q[3].push(y);
						visited[dx][dy] = true;
					}
				}
				else {
					if (map[dx][dy] == alpha) {
						if (dx != bx && dy != by) {
							cout << "Yes";
							exit(0);
						}
					}
				}
			}
		}
	}
}

void Solution() {
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (visited[i][j] == false) {
				BFS(i,j,map[i][j]);
			}
		}
	}
	cout << "No";
}

void Solve() {
	Input();
	Solution();
}

int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Solve();

	return 0;
}
