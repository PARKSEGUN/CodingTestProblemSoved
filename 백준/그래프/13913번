//이번 문제로 발자취를 기억하는 알고리즘을 알게되었다!
//예를 들면 arr[N]=5, arr[5]=10, arr[10]=20,arr[20]=40;
//배열의 값들을 다시 배열에 넣어서 그 흐름을 기억하게 할 수있는 알고리즘이다. 점화식과 비슷하다

#include<iostream>
#include<algorithm>
#include<vector>
#include<climits>
#include<cmath>
#include<queue>
#include<string>
#include<deque>
#include<queue>

#define endl "\n"

using namespace std;

int N, M;
bool visited[111111];
int Point[111111];

void Input() {
	cin >> N >> M;
}
queue<int> q[2];
void Solution() {
	q[0].push(N);
	q[1].push(0);
	while (!q[0].empty()) {
		int x, cnt;
		x = q[0].front();
		cnt = q[1].front();
		if (x == M) {
			cout << cnt<<endl;
			break;
		}
		q[0].pop(); q[1].pop();
		if (x * 2 < 100001 && !visited[x * 2]) {
			visited[x * 2] = true;
			q[0].push(x * 2);
			q[1].push(cnt+1);
			Point[x*2] = x;
		}
		if (x - 1 >= 0 && !visited[x-1]) {
			visited[x - 1]=true;
			q[0].push(x - 1);
			q[1].push(cnt + 1);
			Point[x-1] = x;
		}
		if (x + 1 < 100001 && !visited[x + 1]) {
			visited[x + 1]=true;
			q[0].push(x + 1);
			q[1].push(cnt + 1);
			Point[x+1] = x;
		}
	}
	vector<int> vec;
	while (M != N) {
		vec.push_back(M);
		M = Point[M];
	}cout << N<<" ";
	for (int i = 1; i <= vec.size(); i++) { cout << vec[vec.size()-i] << " "; }
}



void Solve() {
	Input();
	Solution();
	
}

int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Solve();
}
