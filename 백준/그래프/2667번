#include<iostream>
#include<algorithm>
#include<vector>
#include<climits>
#include<cmath>
#include<queue>
#include<string>
#include<deque>
#define endl "\n"

using namespace std;

int N;
bool map[30][30];
vector<int> vec;
int result = 0;

void Input() {
	cin >> N;
	for (int i = 0; i < N; i++) {
		string str;
		cin >> str;
		for (int j = 0; j < N; j++) {
			if (str[j] == '0') { map[i][j] = 0; }
			else { map[i][j] = str[j]; }
		}
	}
}

void DFS(int y, int x) {
	if (y - 1 >= 0 && map[y - 1][x] == 1) {
		map[y - 1][x] = 0;
		result++;
		DFS(y - 1, x);
	}
	 if (y + 1 < N && map[y + 1][x] == 1) {
		map[y + 1][x] = 0;
		DFS(y + 1, x);
		result++;
	}
	 if (x + 1 < N && map[y][x + 1] == 1) {
		map[y][x + 1] = 0;
		DFS(y, x + 1);
		result++;
	}
	 if (x - 1 >= 0 && map[y][x - 1] == 1) {
		map[y][x - 1] = 0;
		DFS(y, x - 1); result++;
	}
}

void Solution() {
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (map[i][j]) {
				result++;
				map[i][j] = 0;
				DFS(i, j);
				vec.push_back(result);
				result = 0;
			}
		}
	}
	sort(vec.begin(), vec.end());
	cout << vec.size()<<endl;
	for (int i = 0; i < vec.size(); i++) { cout << vec[i]<<endl; }

}

void Solve() {
	Input();
	Solution();
}

int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Solve();
}

