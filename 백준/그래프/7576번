#include<iostream>
#include<algorithm>
#include<vector>
#include<climits>
#include<cmath>
#include<queue>
#include<string>
#include<deque>
#include<queue>

#define endl "\n"

using namespace std;
int N, M;
int map[1111][1111];
bool END;

int All = 0;
int cnt = 0;

void Input() {
	cin >> M >> N;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> map[i][j];
			if (map[i][j] == -1) { All++; }
		}
	}
	All = N * M - All;
}
queue<int> q[2];
queue<int> q2[2];

void BFS() {

	while (!q[0].empty()) {
		int y = q[0].front();
		int x = q[1].front();
		q[0].pop();
		q[1].pop();
		if (y - 1 >= 0 && map[y - 1][x] == 0) {
			map[y - 1][x] = 1;	END = true;
			q2[0].push(y - 1); q2[1].push(x);
			cnt++;
		}
		if (y + 1 < N && map[y + 1][x] == 0) {
			map[y + 1][x] = 1; END = true;
			q2[0].push(y + 1); q2[1].push(x);
			cnt++;
		}
		if (x - 1 >= 0 && map[y][x - 1] == 0) {
			map[y][x - 1] = 1; END = true;
			q2[0].push(y); q2[1].push(x - 1);
			cnt++;
		}
		if (x + 1 < M && map[y][x + 1] == 0) {
			map[y][x + 1] = 1; END = true;
			q2[0].push(y); q2[1].push(x + 1);
			cnt++;
		}
	}
}

void BFS_2() {

	while (!q2[0].empty()) {
		int y = q2[0].front();
		int x = q2[1].front();
		q2[0].pop();
		q2[1].pop();
		if (y - 1 >= 0 && map[y - 1][x] == 0) {
			map[y - 1][x] = 1;	END = true;
			q[0].push(y - 1); q[1].push(x);
			cnt++;
		}
		if (y + 1 < N && map[y + 1][x] == 0) {
			map[y + 1][x] = 1; END = true;
			q[0].push(y + 1); q[1].push(x);
			cnt++;
		}
		if (x - 1 >= 0 && map[y][x - 1] == 0) {
			map[y][x - 1] = 1; END = true;
			q[0].push(y); q[1].push(x - 1);
			cnt++;
		}
		if (x + 1 < M && map[y][x + 1] == 0) {
			map[y][x + 1] = 1; END = true;
			q[0].push(y); q[1].push(x + 1);
			cnt++;
		}
	}
}

int result = 0;
void Print() {

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cout << map[i][j] << " ";
		}cout << endl;
	}
}
void Solution() {
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (map[i][j] == 1) {
				cnt++;
				q[0].push(i);
				q[1].push(j);
			}
		}
	}

	while (1) {
		END = false;
		BFS();
		if (!END) { break; }
		result++;
		END = false;
		BFS_2();
		if (!END) { break; }
		result++;
	}
	if (cnt == All) { cout << result; }
	else { cout << -1; }
//	cout << result<<" "<<cnt<<" "<<All;
}



void Solve() {
	Input();
	Solution();
}

int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Solve();
}
