처음에 시도 했던 방법대로 생각없이 제출했다가 바로 틀렸다.
어느 정점을 이미 이전에 통과했어도 똑같은 지점을 통과할때 거울을 더 작게 사용하거나 같은 거울을 사용했다면 통과할 수 있다는 조건문을 걸어줬어야한다.(별 표시부분)
그리고 처음에 작성했던 코드는 시간이 너무 오래 걸렸고 때문에 도달해야되는 레이저 도착부분에 도착을했다면 최솟값을 유지시키고 그 최솟값을 넘는 큐값은 모두 pop 처리를
해주었다. 또 visited 변수를 항상 최솟값을 유지함으로 시간을 줄일 수 있었다.(별 표시부분)

#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
#include<queue>

#define endl "\n"

using namespace std;
int N, M;
int map[111][111];		//0은 빈칸, 1은 벽, 2는 레이저 
vector<int> laser;
void Input() {
	cin >> M >> N;
	for (int i = 0; i < N; i++) {
		string str;
		cin >> str;
		for (int j = 0; j < M; j++) {
			if (str[j] == '.') {
				map[i][j] = 0;
			}
			else if (str[j] == '*') {
				map[i][j] = 1;
			}
			else if (str[j] == 'C') {
				laser.push_back(i); laser.push_back(j);
				map[i][j] = 2;
			}
		}
	}
}
int visited[111][111];
queue<int> q[4];		//[x][y][거울수][전과정의 진행방향]
int dix[4] = { 0,0,1,-1 };
int diy[4] = { 1,-1,0,0 };
int result = 11111;
void Solution() {
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			visited[i][j] = -1;
		}
	}
	q[0].push(laser[0]); q[1].push(laser[1]); q[2].push(0); q[3].push(-1);
	visited[laser[0]][laser[1]] = 0;
	while (q[0].empty() != true) {
		int x = q[0].front();
		int y = q[1].front();
		int mir = q[2].front();
		int bef = q[3].front();
		q[0].pop(); q[1].pop(); q[2].pop(); q[3].pop();
		if (x == laser[2] && y == laser[3]) { result = min(result, mir); visited[x][y] = -1; continue; }
		if (mir >= result) { continue; }//★
		for (int i = 0; i < 4; i++) {
			int dx = x + dix[i];
			int dy = y + diy[i];
			if (dx >= 0 && dx < N && dy >= 0 && dy < M) {
				if (visited[dx][dy] == -1||mir<=visited[dx][dy]) {    //★

					if (map[dx][dy] == 0||map[dx][dy]==2) {
						if (bef == i) {
							q[0].push(dx); q[1].push(dy); q[2].push(mir); q[3].push(i);
							if (visited[dx][dy] == -1) { visited[dx][dy] = mir; }//★
							else visited[dx][dy] = min(visited[dx][dy], mir);//★
						}
						else {
							q[0].push(dx); q[1].push(dy); q[2].push(mir + 1); q[3].push(i);
							if (visited[dx][dy] == -1) { visited[dx][dy] = mir+1; }//★
							else visited[dx][dy] = min(visited[dx][dy], mir+1);//★
						}
					}
				}
			}
		}
	}
	cout << result-1;
}


int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Input();
	Solution();

	return 0;
}
