//DFS 풀이법인데 정답이 나오지않는다.
//DFS 는 항상 visited 변수와 같이 쓰인다는 것을 기억하자
//정답을 확인해봤더니 DFS로 해결하는 것을 권장하지 않는다고 한다.
//DFS는 완전탐색과 비슷하기때문에 시간이 오래걸린다고 한다.
//DFS와 BFS 의 차이점이 무엇인지 확실하게 알아두고 쓰는 방법또한 
#include<iostream>
#include<algorithm>
#include<vector>
#include<climits>
#include<cmath>
#include<queue>
#include<string>
#include<deque>
#define endl "\n"

using namespace std;

int N, M;
bool map[111][111];
bool visited[111][111];
int result = INT_MAX;
void Input() {
	cin >> N >> M;
	for (int i = 1; i <= N; i++) {
		string str;
		cin >> str;
		for (int j = 0; j < str.size(); j++) {
			if (str[j] == '0') { map[i][j + 1] = false; }
			else { map[i][j + 1] = true; }
		}
	}


}

void DFS(int y,int x,int sum) {
	if (y == N && x == M) { result = min(sum, result); return; }

	if (y - 1 >= 1&&map[y-1][x]==1&&!visited[y-1][x]) {
		visited[y - 1][x] = true;
		DFS(y - 1, x, sum + 1);
		visited[y - 1][x] = false;
	}
	if (y + 1<=N&&map[y+1][x]==1 && !visited[y + 1][x]) {
		visited[y + 1][x] = true;
		DFS(y + 1, x, sum + 1);
		visited[y + 1][x] = false;
	}
	if (x - 1 >= 1 && map[y][x-1] == 1 && !visited[y][x-1]) {
		visited[y][x - 1] = true;
		DFS(y, x-1, sum + 1);
		visited[y][x-1] = true;
	}
	if (x + 1 <= M && map[y][x+1] == 1 && !visited[y][x+1]) {
		visited[y][x + 1] = true;
		DFS(y, x+1, sum + 1);
		visited[y][x+1] = false;
	}
	else { return; }

}

void Solution() {
	visited[1][1] = 1;
	DFS(1, 1, 0);
	cout << result+1;
}

void Solve() {
	Input();
	Solution();
}

int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Solve();
}




//BFS 방법
//BFS 방법도  visited 변수를 사용하고 queue 를 사용해서 해결한다는 것을 암기하자
//기본 모양은 while(!q.empty)를 해서 사용한다
#include<iostream>
#include<algorithm>
#include<vector>
#include<climits>
#include<cmath>
#include<queue>
#include<string>
#include<deque>
#include<queue>

#define endl "\n"

using namespace std;

int N, M;
bool map[111][111];
bool visited[111][111];
int cnt[111][111];
queue<int> q[2];

void Input() {
	cin >> N >> M;
	for (int i = 1; i <= N; i++) {
		string str;
		cin >> str;
		for (int j = 0; j < str.size(); j++) {
			if (str[j] == '0') { map[i][j + 1] = false; }
			else { map[i][j + 1] = true; }
		}
	}
}

void BFS(int y, int x) {
	int sum = 0;
	while (!q[0].empty()) {
		int yy = q[0].front();
		int xx = q[1].front();
		q[0].pop();
		q[1].pop();
		sum++;
		if (yy - 1 >= 1 && map[yy - 1][xx] == 1 && !visited[yy - 1][xx]) {
			q[0].push(yy - 1);
			q[1].push(xx);
			visited[yy - 1][xx] = true;
			cnt[yy - 1][xx] = cnt[yy][xx] + 1;
		}
		if (yy + 1 <= N && map[yy + 1][xx] == 1 && !visited[yy + 1][xx]) {
			q[0].push(yy + 1);
			q[1].push(xx);
			visited[yy + 1][xx] = true;
			cnt[yy + 1][xx] = cnt[yy][xx] + 1;
		}
		if (xx - 1 >= 1 && map[yy][xx - 1] == 1 && !visited[yy][xx - 1]) {
			q[0].push(yy);
			q[1].push(xx-1);
			visited[yy][xx - 1] = true;
			cnt[yy][xx - 1] = cnt[yy][xx] + 1;
		}
		if (xx + 1 <= M && map[yy][xx + 1] == 1 && !visited[yy][xx + 1]) {
			q[0].push(yy);
			q[1].push(xx + 1);
			visited[yy][xx + 1] = true;
			cnt[yy][xx + 1] = cnt[yy][xx] + 1;
		}
	}
}

void Solution() {
	q[0].push(1);		//y좌표
	q[1].push(1);
	visited[1][1] = true;
	cnt[1][1] = 1;
	BFS(1, 1);
	cout << cnt[N][M];
}

void Solve() {
	Input();
	Solution();
}

int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Solve();
}



