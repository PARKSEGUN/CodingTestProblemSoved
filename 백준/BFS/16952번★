바로 이전에 풀었던 16959(체스판 여행 1) 과 매우 비슷한 문제여서 코드를 그대로 가져와 수정을했다.
이전 문제와의 차이점은 저번에는 최소 이동횟수만 구하면 되었지만 이번 문제에서는 최소 이동횟수를 구하고 이동횟수가 같다면 최소로 말을 변경한 횟수까지 구하는것이다.
그래서 나는 이전코드에서 minNum 이라는 3차원 배열을 추가했다 이 배열은 [x][y][현재위치한 숫자] 로 작성을 했다.
하지만 이런식으로 작성해서 제출하면 계속 올바른 답이나오지않아서 고민하던중에 이 minNum이라는 배열을 사용하면 굳이 visited 를 사용하지 않아도 중복이 해결이 되었다.
visited 배열을 제거하고 생각해보니 당연한 것이였다, 그냥 거의 비슷한 코드였다. 쨋든 계속 코드를 수정하고 있다가 그러면 visited 는 4차원 배열을 사용했으니
당연히 minNum배열도 4차원으로 진행해야되는것을 알았고, 말의 종류를 나타내는 칸이 빠졌었다. 말의 종류를 나타내는 것을 추가하고 minNum을 4차원 배열로 만들어서
제출하니 AC를 받았다. BFS 더 확실하게 공부하자.

#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>
using namespace std;

int N;
int map[11][11];
int sx, sy;
int numberx[111];
int numbery[111];

queue<pair<int, int>> q;		//현재 좌표
queue<pair<int, int>> h;		//<말의 종류, cnt>
queue<int> current;		//현재위치의 숫자
queue<int>change;	//말을 바꾸는 횟수

int minNum[111][11][11][4];
int dix1[8] = { -2,-2,1,-1,2,2,1,-1 };	//나이트의 이동방법
int diy1[8] = { 1,-1,2,2,1,-1,-2,-2 };

int dix2[4] = { 1,1,-1,-1 };	//비숍의 이동방법
int diy2[4] = { 1,-1,-1,1 };

int dix3[4] = { 1,0,-1,0 };	//룩의 이동방법
int diy3[4] = { 0,-1,0,1 };
bool visited[11][11][111][4];	//[x][y][cur][horse]
int result;
int CC = 987654321;
void Input() {
	cin >> N;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cin >> map[i][j];
			if (map[i][j] == 1) { sx = i; sy = j; }
			numberx[map[i][j]] = i;
			numbery[map[i][j]] = j;
		}
	}
	for (int k = 1; k <= N * N; k++) {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				for (int tlqkf = 1; tlqkf <= 4; tlqkf++) {
					minNum[k][i][j][tlqkf] = 987654321;
				}
			}
		}
	}
}
//말의 종류 : 1-나이트, 2-비숍, 3-룩

void Solve() {
	q.push({ sx,sy });
	h.push({ 1,0 });
	q.push({ sx,sy });
	h.push({ 2,0 });
	q.push({ sx,sy });
	h.push({ 3,0 });
	current.push(1);
	current.push(1);
	current.push(1);
	change.push(0);
	change.push(0);
	change.push(0);

	visited[sx][sy][1][1] = true;
	visited[sx][sy][1][2] = true;
	visited[sx][sy][1][3] = true;
	while (q.size() != 0) {
		int x = q.front().first;
		int y = q.front().second;
		int horse = h.front().first;
		int cnt = h.front().second;
		int cur = current.front();
		int ch = change.front();
		q.pop(); h.pop(); current.pop(); change.pop();

		if (cur ==N*N) {
			//cout << cnt << " " << y << " " << horse << " " << x << " " << cur << " " << ch << endl;
			if (result == 0) { result = cnt; CC = ch; }
					else {
						if (cnt > result) { return; }
						CC = min(ch,CC);
					}
		}	//도착

		for (int i = 1; i <= 3; i++) {		//말 변환
			if (horse != i) {
			if (minNum[cur][x][y][i] <= ch+1) { continue; }
			minNum[cur][x][y][i] = ch+1;
		
				visited[x][y][cur][i] = true;
				q.push({ x,y }); h.push({ i,cnt + 1 }); current.push(cur); change.push(ch + 1);
			}
		}

		if (horse == 1) {
			for (int i = 0; i < 8; i++) {
				int dx = x + dix1[i];
				int dy = y + diy1[i];

				if (dx < 0 || dx >= N || dy < 0 || dy >= N) { continue; }

				if (minNum[cur][dx][dy][horse] <= ch) { continue; }
				minNum[cur][dx][dy][horse] = ch;



				if (dx == numberx[cur + 1] && dy == numbery[cur + 1]) {
					q.push({ dx,dy }); h.push({ horse,cnt + 1 }); current.push(cur + 1); change.push(ch); visited[dx][dy][cur + 1][horse] = true;
				}
				else {
					q.push({ dx,dy }); h.push({ horse,cnt + 1 }); current.push(cur); change.push(ch); visited[dx][dy][cur][horse] = true;
				}
			}
		}
		if (horse == 2) {
			for (int i = 0; i < 4; i++) {
				for (int k = 0; k < 11; k++) {
					int dx = x + dix2[i] * k;
					int dy = y + diy2[i] * k;

					if (dx < 0 || dx >= N || dy < 0 || dy >= N) { continue; }

					if (minNum[cur][dx][dy][horse] <= ch) { continue; }
					minNum[cur][dx][dy][horse] = ch;



					if (dx == numberx[cur + 1] && dy == numbery[cur + 1]) {
						q.push({ dx,dy }); h.push({ horse,cnt + 1 }); current.push(cur + 1); change.push(ch); visited[dx][dy][cur + 1][horse] = true;
					}
					else {
						q.push({ dx,dy }); h.push({ horse,cnt + 1 }); current.push(cur); change.push(ch); visited[dx][dy][cur][horse] = true;
					}
				}
			}
		}
		if (horse == 3) {
			for (int i = 0; i < 4; i++) {
				for (int k = 0; k < 11; k++) {
					int dx = x + dix3[i] * k;
					int dy = y + diy3[i] * k;

					if (dx < 0 || dx >= N || dy < 0 || dy >= N) { continue; }

					if (minNum[cur][dx][dy][horse] <= ch) { continue; }
							minNum[cur][dx][dy][horse] = ch;




					if (dx == numberx[cur + 1] && dy == numbery[cur + 1]) {
						q.push({ dx,dy }); h.push({ horse,cnt + 1 }); current.push(cur + 1); change.push(ch); visited[dx][dy][cur + 1][horse] = true;
					}
					else {
						q.push({ dx,dy }); h.push({ horse,cnt + 1 }); current.push(cur); change.push(ch); visited[dx][dy][cur][horse] = true;
					}
				}
			}
		}
	}

}

int main(void) {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	Input();
	Solve();
	cout << result << " " << CC;
}
