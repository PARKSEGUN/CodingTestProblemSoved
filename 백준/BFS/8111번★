BFS문제여서 길찾기 수준을 생각하다가 BFS로 이런 유형의 문제도 해결이 가능 하다는 것을 알았다.
이번 8111번 0과 1 의 문제에서 중요한 포인트는 
첫번째 무려 최대 100자리 수 까지 나올 수 있어서 무작정 0, 1 을 붙여버리면 안된다는 것
두번째, (문제를 해결하는데 이부분이 가장 중요했다) 1111%N이나 ((111%N)*10+1)%N 이 같다는 것
이 부분만 먼저 알 수 있었다면 쉽게 해결할 수 있었다.
어떻게 보면 당연한 것 같지만 직접 손으로 풀어보지 않고 눈으로만 보고 해결하려고 해서 시간을 많이 허비했다.
세번째, 1, 0 을 나누어 떨어질때까지 붙여주는 방법은 알았으나 문제는 어떠한 결과값을 출력해야하기때문에
값을 뽑아야한다는 것이다.
때문에 1 과 0 을 붙여주는 모든 과정에서 모든 결과값을 저장시키면서 넘어가기에는 오버플로우가 발생할 것 같아서
검색해봤더니 전과정을 기억해주는 변수와 그과정에서 추가된 0 ,1 을 저장하면되는 것이다.
예를 들어서 나누어떨어지는 수였다면 마지막 나머지 값은 0이고 이때 parent[0]=x 를 해주어서 0이 나오기 이전에 값을 어떤 값이 였는지를 그리고
그 과정과 add[0]=1 또는 add[0]=0 으로 1과 0 중 어떤 것이 추가가되었던 것인지를 기억하게 해주는 것이었다.
처음으로 AC를 맞은 플레티넘 문제였다. 혼자서 해결하지는 못했지만 그래도 문제를 이해했고 풀이법을 확실하게 이해했다.
#include<iostream>
#include<vector>
#include<queue>

using namespace std;
int T;
int N;
void Input() {
	cin >> N;
}
bool visited[22222] = {0 ,};
int parent[22222];	//현재값을 넣으면 그 부모가 나온다
bool add[22222];	//0, 1 중 무엇을 추가로 했는지
void BFS() {

	queue<int> q;
	q.push(1);
	parent[1] = -1;
	add[1] = 1;
	visited[1] = true;
	while (q.size() != 0) {
		int cur = q.front();
		q.pop();
		int a = (cur * 10 + 1) % N;
		int b = (cur * 10) % N;
		if (a == 0) { parent[a] = cur; add[a] = 1; return; }
		else {
			if (visited[a] == false) {
				visited[a] = true;
				parent[a] = cur;
				add[a] = 1;
				q.push(a);
			}
		}
		if (b == 0) { parent[b] = cur; add[b] = 0; return; }
		else {
			if (visited[b] == false) {
				visited[b] = true;
				parent[b] = cur;
				add[b] = 0;
				q.push(b);
			}
		}
	}
}
vector<bool> result;
void print(int x) {

	if (x == -1) { return; }

	result.push_back(add[x]);
	print(parent[x]);
}

void Solve() {
	result.clear();
	BFS();
	print(0);
	for (int i = result.size() - 1; i >= 0; i--) { cout << result[i]; }cout << endl;
}

void reset() {
	for (int i = 0; i < 22222; i++) { visited[i] = false; }
}
int main(void) {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	int T;
	cin >> T;
	for (int i = 0; i < T; i++) {
		reset();
		Input();
		Solve();
	}

}
