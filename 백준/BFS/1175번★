BFS를 너무 쉽게생각했고 간단하게 해결할 수 있을 거라고 생각한게 큰 잘못이였다.
이 문제를 보고 BFS알고리즘도 더 공부해야겠다고 생각했다.
이 문제에서 중요한 점은 어떻게 방문 여부를 표시할 것인지 였다. 즉 어떻게 사이클이 만들어지지않게, 무한루프가 생기지 않게 하는 것이 중요했다.
내가 생각했던 방법은 전전의 좌표를 판단해서 현재와 같이 않은지를 비교하는거였지만 반례가 너무많이 존재했고, 그다음 visited 변수에 해당 
좌표에 들어오는 방향을 기억해서 visited[4][50][50] 을 설정해 주는 것이였다.
하지만 예제 5번이 반례였다. 배달 후에 다시 돌아오는 길에 왔던길을 되돌아서 다시 가는 반례가 존재했기에 틀렸다.
그래서 방문 여부에 따라서 visited을 체크해주기로 했다 visited[2][4][50][50] 여기서 [2]가 C의 방문 여부를 나타낸다.
하지만 오답이였고, 다시 예제 5번이 반례였다.
서로 다른 경우들이 각각 다른 C를 만나고 다시 S 로 돌아와 반대 방향으로 이동하려면 이미 두 경우 다 C를 방문하고 돌아오는 것이기 때문에 visited[][50][50]  이 자리에 
불이 켜져있어서 지나가지 못한다.
때문에 정답은 두개 C를 구분시켜서 방문여부 조사하는 케이스를 하나 늘려주어서 visited[2][2][4][50][50] 으로 설정해 주는 것이였다.
이렇게 하면 C를 방문 해도 또다른 C를 방문 했는지에 따라 이동할 수 있었다.
하지만 여기서 두개의 C가 구분이 되지않기때문에  하나의 C를 D로 바꿔주어서 해결했다.

#include<iostream>
#include<vector>
#include<queue>

using namespace std;

int N, M;
char map[55][55];
int sx, sy;
void Input() {
	cin >> N >> M;
	bool chk = 0;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> map[i][j];
			
			if (map[i][j] == 'S') { sx = i; sy = j; }
			if (map[i][j] == 'C') {
				if (chk == true) {
					map[i][j] = 'D';
				}
				chk = true; 
			}

		}
	}
}
bool visited[2][2][4][50][50];	//[D방문여부][C방문여부][들어오는 방향][좌표x][좌표y]
queue<pair<int, int>> q;	//<시작좌표값>>
queue<pair<int,int>> c;	//<결과값,전 방향>
queue<pair<bool,bool>> cd;
int dix[4] = { 1,-1,0,0 };
int diy[4] = { 0,0,1,-1 };
int delivery;
void Solve() {
	q.push({ sx,sy });
	c.push({ 0,-1 });
	cd.push({0,0});
	while (q.size() != 0) {
		int x = q.front().first;
		int y = q.front().second;
		int cnt = c.front().first;
		int dir = c.front().second;
		bool vc = cd.front().first;
		bool vd = cd.front().second;
		if (vc && vd) { cout << cnt; return; }
		q.pop(); c.pop(); cd.pop();
		for (int i = 0; i < 4; i++) {
			int dx = x + dix[i];
			int dy = y + diy[i];
			if (dx>=0&&dx<N&&dy>=0&&dy<M&&map[dx][dy]!='#') {
				if (dir != i) {
					if (visited[vd][vc][i][dx][dy] == false) {
						visited[vd][vc][i][dx][dy] = true;
						if (map[dx][dy] == 'C') {
							q.push({ dx,dy });
							c.push({ cnt + 1,i });
							cd.push({ 1,vd });
						}
						if (map[dx][dy] == 'D') {
							q.push({ dx,dy });
							c.push({ cnt + 1,i });
							cd.push({ vc,1 });
						}
						q.push({ dx,dy });
						c.push({ cnt + 1,i });
						cd.push({ vc,vd });
					}
				}
			}
		}
	}
	cout << -1;
}

int main(void) {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	Input();
	Solve();


}

