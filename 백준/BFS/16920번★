처음에 1~9까지 for문을 돌리고
돌린 수에 맞는 숫자를 map에서 발견했을때마다 거 좌표로부터 갈수있는 모든 곳에 확장시키는 방식으로 작성하였지만
플레이어가 이동할 수 있는 횟수가 10^9로 매우 많기때문에 시간 초과가 발생한다.
이것 때문에 나는 visited 변수를 사용해서 중복처리를 없애주는 방식으로 작성하려고 했지만 반례가 발생했다.
예를 들어 1에 맞는 숫자를 탐색중에 첫번째 발견된 좌표에서 이동할 수 있는 모든 곳에 확장을 시키면 두번째 발견되는 좌표에서 확장시켜야 할 곳에 이미 첫번째
확장되었던 길이있어서 가지못하는 상황이생겼다.
시간초과와 이 반례를 해결할 수 있는 방법이 필요했다.
결국 시간초과를 해결하지 못하고 해답을 봤을때, 해답은 한칸씩 이동하고있었다.
어느 한 좌표를 발견했을때 내가 작성했던 갈수있는 모든 곳에 확장시키는 방식이아니라 각 좌표마다 한칸씩 이동하는 것이였다.
초기에 입력받을때 각 숫자에 맞은 q를 만들어주고 각각 q[1]. q[2]... 맞게 저장을 시켜주는 것이다.
또한 한번 탐색했던 곳을 다시 또 탐색하는 것은 너무 비효율이기때문에 새롭게 탐색된 곳만 다시 q에 저장해주는 것이다(전에있던 값을 모두 없애준다.)

이렇게 하면 시간초과도 해결하고  visited 변수도 필요가 없어 지게돼서 중복해서 탐색하는 것이 사라지게된다.
정말 다양한 BFS 문제가 있는것같다, 이 방법도 새겨두자

#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>
#include<string>

using namespace std;

int N, M,P;
int player[11];		//각 숫자마다 최대 이동수가 저장
char map[1111][1111];

int dix[4] = { 0,0,1,-1 };
int diy[4] = { 1,-1,0,0 };


bool endChk;	//프로그램 종료를 알기위한 변수

queue<pair<int, int>> q[10];
queue<int> mov[10];	//큐는 x좌표 y 좌표, 이동거리 로 저장함

void Input() {
	cin >> N >> M >> P;
	for (int i = 1; i <= P; i++) { cin >> player[i]; }
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> map[i][j];
			if (map[i][j] >= '1' && map[i][j] <= '9') {
				q[map[i][j] - '0'].push({ i,j }); mov[map[i][j] - '0'].push(player[map[i][j] - '0']);
			}
		}
	}
}

void print() {
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cout << map[i][j] << " ";
		}cout << endl;
	}
}
void BFS(int idx) { 
	queue<pair<int, int>> qq=q[idx];
	queue<int> movv=mov[idx];
	while(qq.size()!=0){
		int x = qq.front().first;
		int y = qq.front().second;
		int cnt = movv.front();
		qq.pop(); movv.pop();
		if (cnt == player[idx]) { q[idx].pop(); mov[idx].pop(); }	//초기의 큐에 저장된 값을 없애줌
		if (cnt == 0) { continue; }
		for (int i = 0; i < 4; i++) {
			int dx = x + dix[i];
			int dy = y + diy[i];
			if (dx<0 || dx>=N || dy<0 || dy>=M) { continue; }

			if (map[dx][dy] == '.') {
				map[dx][dy] = idx+'0';
				qq.push({ dx,dy }); movv.push(cnt - 1); q[idx].push({ dx,dy }); mov[idx].push(player[idx]);
				endChk = true;
			}
		}
	}
}

void Solve() {
	while (1) {
		endChk = false;
		for (int k = 1; k <= P; k++) {
			BFS(k);
		}
		if (endChk == false) { break; }

	}
	int result[11]={0,0,0,0,0,0,0,0,0,0,0};
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (map[i][j] >= '1' && map[i][j] <= '9') {
				result[map[i][j]-'0']++;
			}
		}
	}
	for (int i = 1; i <= P; i++) { cout << result[i] << " "; }
	
}

int main(void) {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0); 
		Input();
		Solve();
}
